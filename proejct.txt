Project context
Suite aux développements séparés d'une API REST Spring Boot et d'une application frontend Angular lors des deux briefs précédents (Brief2 Sprint4 et Brief2 Sprint5), l'objectif est maintenant de fusionner ces deux projets en une application fullstack complète et cohérente. Cette intégration permettra de créer une application de streaming musical entièrement fonctionnelle en combinant l'API REST backend sécurisée avec l'interface frontend moderne. Le backend gère le catalogue musical, le stockage des fichiers audio et l'authentification, tandis que le frontend offre à l'utilisateur une bonne lecture et organisation de la musique

​

Entités Principales :

Album : titre (String), artiste (String), annee (Integer)
Chanson : titre (String), duree (Integer), trackNumber (Integer), description (String, max 200 caractères), catégorie (String), date d'ajout (Date), audioFileId (String)
User : login (String), password (String), active (Boolean), roles (Collection de Role)
Role : name (String)
​

--- audioFileId (String) : ID de référence vers le fichier stocké dans GridFS

Un album peut avoir plusieurs chansons
Une chanson appartient à un seul album
​

Fonctionnalités Requises :

​

Backend (Spring Boot) :

​

Gestion des Albums : (/api/user/albums/**, /api/admin/albums/**)

Lister les albums avec pagination (USER ou ADMIN)
Rechercher les albums par titre avec pagination et sorting (USER ou ADMIN)
Rechercher les albums par artiste (USER ou ADMIN)
Filtrer les albums par année avec pagination et sorting (USER ou ADMIN)
Ajouter un nouvel album (ADMIN uniquement)
Modifier un album existant (ADMIN uniquement)
Supprimer un album (ADMIN uniquement)
​

Gestion des Chansons : (/api/user/songs/**, /api/admin/songs/**)

Lister les chansons avec pagination (USER ou ADMIN)
Rechercher les chansons par titre avec pagination et sorting (USER ou ADMIN)
Lister les chansons d'un album avec pagination et sorting (USER ou ADMIN)
Ajouter une nouvelle chanson avec upload de fichier (ADMIN uniquement)
Modifier une chanson existante (ADMIN uniquement)
Supprimer une chanson (ADMIN uniquement)
​

Gestion des Utilisateurs :

/api/auth/login (authentification)
POST /api/auth/register (création de compte)
GET /api/admin/users (liste des utilisateurs, ADMIN uniquement)
PUT /api/admin/users/{id}/roles (gestion des rôles, ADMIN uniquement)
​

Gestion des fichiers audio :

Upload limité à 15MB maximum
Formats supportés : MP3, WAV, OGG
Stockage sécurisé dans la base de données
​

Frontend (Angular) :

​

Gestion des tracks :

Système CRUD complet avec NgRx
Gestion des métadonnées (nom, artiste, description, durée, catégorie)
Upload des fichiers audio
Système de recherche et filtrage
​

Lecteur audio :

Contrôles de lecture (play, pause, next, previous)
Contrôle du volume et de la progression
Gestion des états du lecteur via NgRx
​

Interface utilisateur :

Page d'authentification et register
Page Bibliothèque avec liste des albums
Page Album détaillée affichant tous les tracks de l'album sélectionné
Barre de recherche dans les deux pages
Système de filtres dans les deux pages
Lecteur audio intégré
​

Technologies et concepts à utiliser :

​

Backend :

Spring Boot
Spring Security avec JWT
Spring Data MongoDB
MongoDB comme SGBD
--- GridFS pour le stockage des fichiers audio et le Streaming des données

REST API
Bean Validation
Design patterns (Repository, DTO, Mapper)
Tests (JUnit, Mockito)
Docker
Jenkins
​

Frontend :

Angular 17
NgRx
TypeScript
RxJS
Reactive Forms
Bootstrap ou Tailwind
​

Exigences techniques :

​

Backend :

Profiles (dev, prod)
Tests unitaires
Gestion des exceptions
Système de logging
Validation métier
Gestion des transactions
​

Frontend :

Architecture modulaire
Lazy loading
Tests unitaires
--- Guards pour la sécurité

--- Resolvers pour le pré-chargement des données

Gestion d'état avec NgRx
Composants réutilisables
Services d'authentification
--- Intercepteurs HTTP